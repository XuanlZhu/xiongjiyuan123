{"name": "test_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=95.0.4638.54)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x010D3AB3+2505395]\n\tOrdinal0 [0x0106AE41+2076225]\n\tOrdinal0 [0x00F72498+1057944]\n\tOrdinal0 [0x00F9CD06+1232134]\n\tOrdinal0 [0x00FC6D92+1404306]\n\tOrdinal0 [0x00FB5A2A+1333802]\n\tOrdinal0 [0x00FC5168+1397096]\n\tOrdinal0 [0x00FB58BB+1333435]\n\tOrdinal0 [0x00F923E4+1188836]\n\tOrdinal0 [0x00F9323F+1192511]\n\tGetHandleVerifier [0x0125CB36+1554566]\n\tGetHandleVerifier [0x01304A0C+2242396]\n\tGetHandleVerifier [0x01160E0B+523099]\n\tGetHandleVerifier [0x0115FEB0+519168]\n\tOrdinal0 [0x010702FD+2097917]\n\tOrdinal0 [0x01074388+2114440]\n\tOrdinal0 [0x010744C2+2114754]\n\tOrdinal0 [0x0107E041+2154561]\n\tBaseThreadInitThunk [0x7791FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]", "trace": "self = <hello_world.pytest_app.web_ui.case.test_home_page.TestHomePage object at 0x000001D2B054AA90>\n\n    def test_001(self):\n>       self.driver.sendkeys(HomePage.element_search,'ni ma si le').click(HomePage.element_search_submit)\n\ntest_home_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\action.py:34: in sendkeys\n    self.driver.find_element(*element).send_keys(value)\nC:\\Users\\xiong\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1238: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\xiong\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D2B054A910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=95.0.4638.54)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x010D3AB3+2505395]\nE       \tOrdinal0 [0x0106AE41+2076225]\nE       \tOrdinal0 [0x00F72498+1057944]\nE       \tOrdinal0 [0x00F9CD06+1232134]\nE       \tOrdinal0 [0x00FC6D92+1404306]\nE       \tOrdinal0 [0x00FB5A2A+1333802]\nE       \tOrdinal0 [0x00FC5168+1397096]\nE       \tOrdinal0 [0x00FB58BB+1333435]\nE       \tOrdinal0 [0x00F923E4+1188836]\nE       \tOrdinal0 [0x00F9323F+1192511]\nE       \tGetHandleVerifier [0x0125CB36+1554566]\nE       \tGetHandleVerifier [0x01304A0C+2242396]\nE       \tGetHandleVerifier [0x01160E0B+523099]\nE       \tGetHandleVerifier [0x0115FEB0+519168]\nE       \tOrdinal0 [0x010702FD+2097917]\nE       \tOrdinal0 [0x01074388+2114440]\nE       \tOrdinal0 [0x010744C2+2114754]\nE       \tOrdinal0 [0x0107E041+2154561]\nE       \tBaseThreadInitThunk [0x7791FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DF7A6E+238]\n\nC:\\Users\\xiong\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: InvalidArgumentException"}, "start": 1635292955042, "stop": 1635292955044, "uuid": "876e9a5f-1eaa-4e0b-8ce9-2195584e10c5", "historyId": "8d78fd76228dfd72f26e11d33e601dd5", "testCaseId": "4e65105b97b1aeb201726571660bc3e2", "fullName": "web_ui.case.test_home_page.TestHomePage#test_001", "labels": [{"name": "parentSuite", "value": "web_ui.case"}, {"name": "suite", "value": "test_home_page"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "DESKTOP-IHHQPT4"}, {"name": "thread", "value": "6296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "web_ui.case.test_home_page"}]}